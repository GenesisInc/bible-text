version: 3

vars:
  TMP_DIR:
    sh: mkdir -p "data/tmp" && echo "data/tmp"
  setup_tmp:
    sh: mkdir -p tmp && echo tmp
  bible_data_json: data/nwt_bible.json
  bible_data_csv: data/nwt_bible.csv
  BIBLES_BASE_DIR: data/bibles
  MULTI_BIBLE: data/multi_translation.json
  JW_ORG_DIR: jw_org
  GATEWAY_DIR: bible_gateway
  BOOKS: |
    Genesis
    Exodus
    Leviticus
    Numbers
    Deuteronomy
    Joshua
    Judges
    Ruth
    1 Samuel
    2 Samuel
    1 Kings
    2 Kings
    1 Chronicles
    2 Chronicles
    Ezra
    Nehemiah
    Esther
    Job
    Psalms
    Proverbs
    Ecclesiastes
    Song of Solomon
    Isaiah
    Jeremiah
    Lamentations
    Ezekiel
    Daniel
    Hosea
    Joel
    Amos
    Obadiah
    Jonah
    Micah
    Nahum
    Habakkuk
    Zephaniah
    Haggai
    Zechariah
    Malachi
    Matthew
    Mark
    Luke
    John
    Acts
    Romans
    1 Corinthians
    2 Corinthians
    Galatians
    Ephesians
    Philippians
    Colossians
    1 Thessalonians
    2 Thessalonians
    1 Timothy
    2 Timothy
    Titus
    Philemon
    Hebrews
    James
    1 Peter
    2 Peter
    1 John
    2 John
    3 John
    Jude
    Revelation
  CHAPTERS: |
    Genesis:50
    Exodus:40
    Leviticus:27
    Numbers:36
    Deuteronomy:34
    Joshua:24
    Judges:21
    Ruth:4
    1 Samuel:31
    2 Samuel:24
    1 Kings:22
    2 Kings:25
    1 Chronicles:29
    2 Chronicles:36
    Ezra:10
    Nehemiah:13
    Esther:10
    Job:42
    Psalms:150
    Proverbs:31
    Ecclesiastes:12
    Song of Solomon:8
    Isaiah:66
    Jeremiah:52
    Lamentations:5
    Ezekiel:48
    Daniel:12
    Hosea:14
    Joel:3
    Amos:9
    Obadiah:1
    Jonah:4
    Micah:7
    Nahum:3
    Habakkuk:3
    Zephaniah:3
    Haggai:2
    Zechariah:14
    Malachi:4
    Matthew:28
    Mark:16
    Luke:24
    John:21
    Acts:28
    Romans:16
    1 Corinthians:16
    2 Corinthians:13
    Galatians:6
    Ephesians:6
    Philippians:4
    Colossians:4
    1 Thessalonians:5
    2 Thessalonians:3
    1 Timothy:6
    2 Timothy:4
    Titus:3
    Philemon:1
    Hebrews:13
    James:5
    1 Peter:5
    2 Peter:3
    1 John:5
    2 John:1
    3 John:1
    Jude:1
    Revelation:22
  # merged from other taskfile - needs cleanup
  COMMA_PAT: '
    s/\([0-9]\),\([0-9]\)/\1\2/g;
    s/,/ /g
    '
  SPACE_PAT: "s/ / /g; s/;/ /g; s/[[:space:]][[:space:]]*/ /g; s/ $//g"
  SEMICOLON_PAT: "s/;/ /g"
  PLAIN_BASE_DIR: ../newWorldTranslation/english/2013-release-plain-text
  RAW_BASE_DIR: ../newWorldTranslation/english/2013-release
  FILE_PAT: "{{.PLAIN_BASE_DIR}}/*/*"

tasks:
  default: task -a

  fix-nog-elohim:
    cmds:
      - |
        # # fix spaces around Elohim:
        sed -E -i '' 's/([a-zA-Z0-9])Elohim([a-zA-Z0-9])/\1 Elohim \2/g;
          s/([a-zA-Z0-9])Elohim/\1 Elohim/g;
          s/Elohim([a-zA-Z0-9])/Elohim \1/g' data/multi_translation.json

  test:
    cmds:
      - task changed_files -- 3m
      - task: load-bibles
      - task changed_files -- 3m

  changed_files:
    vars:
      duration: '{{default "5m" .CLI_ARGS}}'
    cmds:
      - |
        fd -HI . -tf  \
          --changed-within={{.duration}} \
          --exclude .ruff_cache \
          --exclude .git \
          --exclude .pytest_cache \
          --exclude "*.log" \
          --exclude __pycache__

  load-jworg:
    cmds:
      - |
        uv run main.py load-jworg \
          --input-dir data/bibles/jw_org/nwt \
          --output-dir "{{.TMP_DIR}}"

  load-bibles:
    aliases:
      - jsonify-bibles
    cmds:
      - task: load-gateway
      - task: load-jworg
      - task: merge-nwt

  load-gateway:
    cmds:
      - |
        uv run main.py load-gateway \
          --input-dir data/bibles/bible_gateway \
          --output-dir "{{.TMP_DIR}}"

  merge-nwt-to-multi-translation:
    aliases:
      - merge-nwt
    cmds:
      - |
        uv run main.py merge-translation \
          --translation nwt \
          --input-file "{{.TMP_DIR}}/nwt_bible.json" \
          --output-file "{{.TMP_DIR}}/multi_translation.json"

  uv-sync:
    cmds:
      - |
        uv sync
        uv run python3 -m spacy download en_core_web_sm

  run: task -p generate-json extract
  # run: task -p gen_tag gen_lifespan

  status:
    silent: true
    cmds:
      - |
        jq '
        {
          total_books: (.nwt | keys | length),
          total_chapters: (.nwt | to_entries | map(.value | keys | length) | add),
          total_verses: (.nwt | to_entries | map(.value | to_entries | map(.value | keys | length) | add) | add)
        }' {{.bible_data_json}} | mlr --j2p --barred cat

  dl-bibles:
    cmds:
      ## sample tasks to download multiple versions at-once
      # - task: dl-bible
      #   vars: { VERSIONS: "ASV,KJ21" }
      # - task: dl-biblegateway
      #   vars: { VERSIONS: "asv" }
      # - task: dl-biblegateway
      #   vars: { VERSIONS: "kj21" }
      # - task: dl-biblegateway
      #   vars: { VERSIONS: "kjv" }
      # - task: dl-biblegateway
      #   vars: { VERSIONS: "NOG" }
      - task: dl-bible
        vars: { VERSIONS: "OJB" }

  dl-bible:
    internal: true
    silent: true
    cmds:
      - |
        # set -x
        downloaded_now=0
        downloaded_already=0

        echo "{{.VERSIONS}}" | tr ',' '\n' | while IFS= read -r version; do
          echo "{{.BOOKS}}" | while IFS= read -r book; do
            # Skip empty lines
            [ -z "$book" ] && continue
            encoded_book=$(echo "$book" | sed 's/ /%20/g') # Encode spaces in book names
            mkdir -p "bibles/${version}/${book}"

            # Fetch the total number of chapters for the book
            total_chapters=$(echo "{{.CHAPTERS}}" | grep -E "^${book}:" | cut -d':' -f2)
            if [ -z "$total_chapters" ]; then
              echo "$(date +'%Y-%m-%d %H:%M:%S') Error: No chapter count found for ${book}. Skipping."
              continue
            fi

            for ch in $(seq 1 "$total_chapters"); do
              chapter_file="{{.BIBLES_BASE_DIR}}/{{.GATEWAY_DIR}}/${version}/${book}/${ch}.html"
              dl_status="Downloaded this run: ${downloaded_now}/$((downloaded_now+downloaded_already))"
              printf "\n$(date +'%Y-%m-%d %H:%M:%S') ${dl_status}, processing ${version}: ${book}:${ch}"
              if [[ ! -f "${chapter_file}" ]]; then
                printf " | downloading now ..."
                downloaded_now=$((downloaded_now+1))
                search_str="${encoded_book}%20${ch}&version=${version}&interface=print"
                curl -k -s -o "${chapter_file}" -w "%{http_code}" \
                  "https://www.biblegateway.com/passage/?search=${search_str}" > /dev/null
              else
                downloaded_already=$((downloaded_already+1))
                printf " | already downloaded ..."
                # continue
              fi

              # Validate content
              if ! grep -q "passage-content" "${chapter_file}"; then
                echo "$(date +'%Y-%m-%d %H:%M:%S') Stopping ${book} at Chapter ${ch} for Version ${version} (invalid content)."
                break
              fi

              text_file="${chapter_file%.html}.txt"
              if [[ ! -f "${text_file}" ]]; then
                grep -A1 "passage-content passage-class-0" "${chapter_file}" > "${text_file}"
              fi
              # printf " | total downloaded: $((downloaded_now+downloaded_already))"
            done
          done
        done

  quick-analysis:
    silent: true
    cmds:
      - |
        for t in KJ21 ASV ; do
          echo "translation: ${t}"
          echo "files smaller than 1000 bytes:"
          fd -HI . data/bibles/bible_gateway/${t} --size=-1000b -x ls -al
          printf "total txt files: "
          fd -HI . data/bibles/bible_gateway/${t} -e txt | wc -l
          printf "total html files: "
          fd -HI . data/bibles/bible_gateway/${t} -e html | wc -l
          echo
        done

  clean_symbols:
    cmds:
      - task: semicolon
      - task: comma
      - task: spaces
      - task: remove-symbols
      - task: square-brackets
      - task: special-cases

  special_cases:
    cmds:
      - |
        # Remove only leading or trailing Unicode hyphens (EN DASH and EM DASH),
        #   but keep internal hyphens intact
        sed -i "" 's/^[\–—]\+//; s/[\–—]\+$//' {{.FILE_PAT}}

  verify-special-cases:
    cmds:
      - |
        words=("—He" "—I" "2" "—Let" "Mountains" "—Sihon" "—The" "—provided" "—that" "——" "perished—the")

        for word in "${words[@]}" ; do
          echo "$word" | sed 's/^[\–—]\+//; s/[\–—]\+$//'
        done

  square-brackets_2:
    cmds:
      - |
        # cleanup these words
        #   [Ayin]In [Ayin]They [Beth]In [Beth]Who [Daleth]And [Daleth]They
        #   [Lamed]12 [Lamed]By [Nun]He [Nun]Trustworthy [Waw]And
        sed -i "" 's/\[.*\]//g;' {{.FILE_PAT}}

  square-brackets:
    cmds:
      - |
        # Remove text within square brackets
        sed -i "" 's/\[[^]]*\]//g' {{.FILE_PAT}}

  remove-unicode-symbols:
    cmds:
      - |
        # Remove symbols including additional Unicode symbols
        sed -i "" 's/[()“”.;:‘ʹ·"!?’בדויִלנכע]//g' {{.FILE_PAT}}

  remove-symbols:
    cmds:
      - |
        # remove other symbols
        sed -i "" 's/[()“”.;:‘ʹ·"!?’]//g;' {{.FILE_PAT}}

  spaces:
    cmds:
      - |
        sed -i "" "{{.SPACE_PAT}}" {{.FILE_PAT}}

  semicolon:
    cmds:
      - |
        sed -i "" "{{.SEMICOLON_PAT}}" {{.FILE_PAT}}

  comma:
    cmds:
      - |
        sed -i "" "{{.COMMA_PAT}}" {{.FILE_PAT}}

  split:
    cmds:
      - |
        mkdir -p tmp
        # Split words and numbers
        cat {{.FILE_PAT}} | tr ' ' '\n' > analysis/words.list

        # Separate numbers and words
        grep '^[0-9]' analysis/words.list > tmp/numeric.list
        grep '^[^0-9]' analysis/words.list > tmp/words_only.list

        # Process numeric list: sort numerically and count occurrences
        cat tmp/numeric.list | sort -n | uniq -c | sort -k2,2n > tmp/numeric-counts.list

        # Process words list: sort by count (desc), then alphabetically
        cat tmp/words_only.list | sort | uniq -c | sort -k1,1nr -k2,2 > tmp/words-counts.list

        # Combine both lists: numbers first, then words
        cat tmp/words-counts.list tmp/numeric-counts.list > analysis/word_counts.list

  fix-verse-separator:
    cmds:
      - |
        for file in newWorldTranslation/english/2013-release/*/*; do
          sed -E -i '' 's/^1 /1 /' "$file"
        done

  split-2:
    cmds:
      - |
        cat {{.FILE_PAT}}  | tr ' ' '\n' > analysis/words.list
        cat analysis/words.list | sort | uniq -c | sort -n > analysis/word_counts.list

  show_word_counts:
    cmds:
      - |
        cat -n analysis/word_counts.list

  verify_few_tasks:
    cmds:
      - |
        words=("day,16" "saying,May" "10,100" "10,x" "x,10" "them,Because" "multi   spaces" "greedy one; [Nun]He")

        for word in "${words[@]}" ; do
          echo "$word" \
            | sed "{{.COMMA_PAT}}" \
            | sed "{{.SPACE_PAT}}"
        done

  wc:
    cmds:
      - |
        wc {{.FILE_PAT}}

  refresh_plain_text:
    cmds:
      - |
        rm -rf {{.PLAIN_BASE_DIR}}
        cp -r {{.RAW_BASE_DIR}} {{.PLAIN_BASE_DIR}}
