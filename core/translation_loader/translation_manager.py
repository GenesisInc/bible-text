# bible-text/core/translation_loader/translation_manager.py
"""manage bible translations json like merge & extract."""

import json

from core.utils import file_utils


def extract_translation(multi_translation_data, translation_name):
    """Extract a specific translation from the multi-translation format.

    Args:
        multi_translation_data (dict): Multi-translation JSON data.
        translation_name (str): Translation key to extract (e.g., "asv", "kj21", "nwt").

    Returns:
        dict: Single-translation format JSON with the specified translation.
    """
    single_translation_data = {}

    for book, chapters in multi_translation_data.items():
        if book not in single_translation_data:
            single_translation_data[book] = {}

        for chapter, verses in chapters.items():
            if chapter not in single_translation_data[book]:
                single_translation_data[book][chapter] = {}

            for verse, translations in verses.items():
                if translation_name in translations:
                    single_translation_data[book][chapter][verse] = translations[
                        translation_name
                    ]

    return {translation_name: single_translation_data}


def merge_translations(nwt_data, kj21_asv_data, translation):
    """Merge NWT data into KJ21/ASV structured data.

    Args:
        nwt_data (dict): Data generated by `load-nwt` (NWT structure).
        kj21_asv_data (dict): Data generated by `load-kj21-asv` (KJ21/ASV structure).

    Returns:
        dict: Merged structure with all translations.
    """
    merged_data = kj21_asv_data.copy()

    for book, chapters in nwt_data.get(translation, {}).items():
        if book not in merged_data:
            merged_data[book] = {}

        for chapter, verses in chapters.items():
            if chapter not in merged_data[book]:
                merged_data[book][chapter] = {}

            for verse, text in verses.items():
                if verse not in merged_data[book][chapter]:
                    merged_data[book][chapter][verse] = {}
                # Add NWT translation
                merged_data[book][chapter][verse]["nwt"] = text

    return merged_data


def test_merge_single_translation_to_multi():
    """Test merge_single_translation_to_multi."""
    multi_translation_path = "data/multi_translation.json"
    single_translation_path = "data/nwt_bible.json"
    output_path = "data/merged_translation.json"

    # Load multi-translation JSON
    with open(multi_translation_path, encoding="utf-8") as f:
        multi_translation_data = json.load(f)

    # Load single-translation JSON (e.g., NWT)
    with open(single_translation_path, encoding="utf-8") as f:
        single_translation_data = json.load(f)

    # Merge the single translation into the multi-translation structure
    merged_translation = merge_translations(
        single_translation_data, multi_translation_data, "nwt"
    )

    # Save the result
    file_utils.save_to_json(merged_translation, output_path)

    print(f"Merged translation saved to {output_path}")


if __name__ == "__main__":
    test_merge_single_translation_to_multi()
